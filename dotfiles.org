#+PROPERTY: header-args :padline no
#+OPTIONS: toc:2
#+TITLE: Dotfiles
* Table of Contents :TOC:
- [[#emacs][Emacs]]
- [[#nixos][NixOS]]
  - [[#configurationnix][configuration.nix]]
  - [[#homenix][home.nix]]
- [[#i3][i3]]
  - [[#config][config]]
- [[#ranger][Ranger]]
  - [[#rcconf][rc.conf]]
- [[#npm][NPM]]
  - [[#npmrc][.npmrc]]
- [[#jetbrains][Jetbrains]]
  - [[#ideavimrc][.ideavimrc]]
- [[#sound][Sound]]
  - [[#toggle][toggle]]
- [[#bash][Bash]]
  - [[#bashrc][bashrc]]
- [[#x11][X11]]
  - [[#xrandrsh][xrandr.sh]]
- [[#git][Git]]
  - [[#gitconfig][.gitconfig]]
  - [[#gitignore][.gitignore]]

* Emacs
[[file:.doom.d/config.org][Emacs config]]
* NixOS
** configuration.nix
#+BEGIN_SRC nix :mkdirp yes :tangle (to ".config/nixos/configuration.nix" IS-LINUX)
{ config, pkgs, ... }:

{

  imports = [ ./hardware-configuration.nix ];
  nix.extraOptions = ''
    keep-outputs = true
    keep-derivations = true
  '';
  nix.nixPath = [
    "nixpkgs=/home/andre/nixpkgs"
    "nixos-config=/home/andre/.config/nixos/configuration.nix"
    "home-manager=/home/andre/home-manager"
    #"/nix/var/nix/profiles/per-user/root/channels"
  ];

  programs.adb.enable = true;
  boot.kernelPackages = pkgs.linuxPackages_latest;
  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
  hardware.cpu.amd.updateMicrocode = true;
  # Set your time zone.
  time.timeZone = "Europe/Berlin";

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  networking.useDHCP = false;
  networking.interfaces.enp34s0.useDHCP = true;
  networking.networkmanager.enable = true;

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  # i18n.defaultLocale = "en_US.UTF-8";
  console = {
    #   font = "Lat2-Terminus16";
    keyMap = "neo";
  };

  # Enable the X11 windowing system.
  # services.xserver.enable = true;

  services.xserver = {
    windowManager.i3.package = pkgs.i3-gaps;
    windowManager.i3.enable = true;

    displayManager = {
      defaultSession = "none+i3";
      autoLogin = {
        enable = true;
        user = "andre";
      };
    };
    layout = "de";
    xkbVariant = "neo";
    enable = true;
    videoDrivers = [ "amdgpu" ];
    deviceSection = ''
      Option "TearFree" "true"
    '';
  };
  # Configure keymap in X11
  # services.xserver.layout = "us";
  # services.xserver.xkbOptions = "eurosign:e";

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable sound.
  # sound.enable = true;
  hardware.pulseaudio.enable = true;

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.andre = {
    isNormalUser = true;

    description = "André Krüger";
    extraGroups = [ "wheel" "networkmanager" ]; # Enable ‘sudo’ for the user.
  };

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs;
    [
      #wget vim

      #firefox
    ];

  programs.nm-applet.enable = true;
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  programs.ssh.startAgent = true;

  programs.gnupg.agent = {
    enable = true;
    #   enableSSHSupport = true;
  };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  networking.firewall.allowedTCPPorts = [ 22000 8081 ];
  networking.firewall.allowedUDPPorts = [ 22000 21027 ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "20.09"; # Did you read the comment?

}

#+END_SRC
** home.nix
#+BEGIN_SRC nix :mkdirp yes :tangle (to ".config/nixpkgs/home.nix" IS-LINUX)
{ config, pkgs, ... }: {
  nixpkgs.config.allowUnfree = true;
  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;

  # Home Manager needs a bit of information about you and the
  # paths it should manage.
  home.username = "andre";
  home.homeDirectory = "/home/andre";

  services.mpd.enable = true;
  services.mpd.extraConfig = ''
    audio_output {
        type "pulse"
        name "Pulseaudio"
      }
        '';

  programs.ncmpcpp.enable = true;
  services.mpd.network.startWhenNeeded = true;
  services.mpd.musicDirectory = "${builtins.getEnv "HOME"}/Sync/Music";

  programs.direnv = {
    enable = true;
    enableBashIntegration = true;
    enableNixDirenvIntegration = true;
  };
  programs.feh.enable = true;

  xsession.profileExtra = ''
    xrandr.sh
        '';
  xsession.enable = true;
  xsession.windowManager.command = "i3";
  xsession.pointerCursor = {
    package = pkgs.vanilla-dmz;
    name = "Vanilla-DMZ";
    size = 48;
  };
  xresources.properties = { "Xft.dpi" = 192; };
  programs.alacritty = {
    enable = true;
    #settings={
    #background_opacity=0.5;
    #};
  };
  programs.bash = {
    enable = true;
    initExtra = (builtins.readFile
      "${(builtins.getEnv "HOME")}/.dotfiles/generated/bashrc");
  };
  programs.firefox = {
    enable = true;
    profiles.andre.isDefault = true;
    profiles.andre.settings = {
      "identity.fxaccounts.enabled" = false;
      "privacy.donottrackheader.enabled" = true;
      "privacy.trackingprotection.enabled" = true;
      "privacy.trackingprotection.socialtracking.enabled" = true;
      "dom.security.https_only_mode" = true;
      "app.shield.optoutstudies.enabled" = false;
      "browser.discovery.enabled" = false;
      "browser.contentblocking.category" = "strict";
      "browser.newtabpage.activity-stream.asrouter.userprefs.cfr.addons" =
        false;
      "browser.startup.page" = 3;
      "signon.generation.enabled" = false;
      "browser.newtabpage.activity-stream.asrouter.userprefs.cfr.features" =
        false;
      "extensions.pocket.enabled" = false;
      "gfx.webrender.all" = true;
      "signon.rememberSignons" = false;
      #"privacy.annotate_channels.strict_list.enabled"=true;
    };
  };
  home.packages = with pkgs; [
    glib
    ueberzug
    ranger
    git
    xss-lock
    nixfmt
    emacs
    ripgrep
    coreutils
    fd
    syncthing
    keepassxc
    thunderbird
    xidlehook
    jetbrains.webstorm
    android-studio
    libsecret
    flac
    shfmt
  ];
  # This value determines the Home Manager release that your
  # configuration is compatible with. This helps avoid breakage
  # when a new Home Manager release introduces backwards
  # incompatible changes.
  #
  # You can update Home Manager without changing this value. See
  # the Home Manager release notes for a list of state version
  # changes in each release.
  home.stateVersion = "21.05";
}
#+END_SRC
* i3
** config
#+BEGIN_SRC conf :mkdirp yes :tangle (to ".config/i3/config" IS-LINUX)
set $mod Mod4
set $mod3 Mod3

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:monospace 8

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
#font pango:DejaVu Sans Mono 8

# The combination of xss-lock, nm-applet and pactl is a popular choice, so
# they are included here as an example. Modify as you see fit.

# xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
# screen before suspend. Use loginctl lock-session to lock your screen.
exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork
 
for_window [title=".*Emulator.*"] floating enable

exec --no-startup-id feh --bg-fill Downloads/background.jpg

#floating_minimum_size 640 x 480
#floating_maximum_size 800 x 600

exec --no-startup-id xidlehook \
  --not-when-fullscreen \
  --not-when-audio \
  --timer 300 \
    'xset dpms force standby' \
    '' \
  --timer 900 \
    'systemctl suspend' \
    ''

#floating_maximum_size 640 x 480
exec --no-startup-id i3-msg 'workspace 1; exec firefox'
exec --no-startup-id i3-msg 'workspace 2; exec keepassxc'

# Use pactl to adjust volume in PulseAudio.
set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec alacritty

# kill focused window
bindsym $mod+Shift+Q kill

bindsym $mod+t exec --no-startup-id toggle-audio-output.sh
# start dmenu (a program launcher)
bindsym $mod+d exec --no-startup-id dmenu_run
# A more modern dmenu replacement is rofi:
# bindcode $mod+40 exec "rofi -modi drun,run -show drun"
# There also is i3-dmenu-desktop which only displays applications shipping a
# .desktop file. It is a wrapper around dmenu, so you need that installed.
# bindcode $mod+40 exec --no-startup-id i3-dmenu-desktop

# alternatively, you can use the cursor keys:
bindsym $mod+$mod3+Left focus left
bindsym $mod+$mod3+Down focus down
bindsym $mod+$mod3+Up focus up
bindsym $mod+$mod3+Right focus right

# alternatively, you can use the cursor keys:
bindsym $mod+$mod3+Shift+Left move left
bindsym $mod+$mod3+Shift+Down move down
bindsym $mod+$mod3+Shift+Up move up
bindsym $mod+$mod3+Shift+Right move right

# split in horizontal orientation
bindsym $mod+h split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# switch to workspace
bindsym $mod+1 workspace number $ws1
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace number $ws1
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10

# reload the configuration file
bindsym $mod+Shift+adiaeresis reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+C restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+L exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

# for_window [class="Firefox" window_role="pop-up"] tiling enable

for_window  [class=".*"] border pixel 2
smart_borders on
#	gaps outer  5
gaps inner 10
smart_gaps on

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym n resize shrink width 10 px or 10 ppt
        bindsym r resize grow height 10 px or 10 ppt
        bindsym t resize shrink height 10 px or 10 ppt
        bindsym d resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+c mode "default"
}

bindsym $mod+c mode "resize"

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
    tray_output primary
    status_command i3status
}
#+END_SRC
* Ranger
** rc.conf
#+BEGIN_SRC conf :mkdirp yes :tangle (to ".config/ranger/rc.conf" IS-LINUX)
map DD shell gio trash %s
set show_hidden true
set preview_images true
    set preview_images_method ueberzug
#+END_SRC
* NPM
** .npmrc
#+BEGIN_SRC conf :tangle (to ".npmrc")
save-exact=true
#+END_SRC
* Jetbrains
** .ideavimrc
#+BEGIN_SRC conf :tangle (to ".ideavimrc" IS-LINUX)
set commentary
set relativenumber
let mapleader="\<Space>"
nmap <leader>. :action GotoDeclaration<cr>
nmap <leader>, :action Back<cr>
set clipboard+=unnamed
set ignorecase
set smartcase
#+END_SRC
* Sound
** toggle
#+BEGIN_SRC sh :shebang #!/bin/sh :tangle (to ".local/bin/toggle-audio-output.sh" IS-LINUX)
HEADPHONE="active profile: <output:analog-stereo+input:analog-stereo>"
SPEAKER="active profile: <output:iec958-stereo>"
OUTPUT=$(pacmd list-cards | grep "active profile" | tail -n1 | xargs)

if [ "$OUTPUT" = "$HEADPHONE" ]
then
  pacmd set-card-profile 1 output:iec958-stereo
elif [ "$OUTPUT" = "$SPEAKER" ]
then
  pacmd set-card-profile 1 output:analog-stereo+input:analog-stereo
fi

#+END_SRC
* Bash
** bashrc
#+BEGIN_SRC sh :mkdirp yes :tangle (to ".dotfiles/generated/bashrc" IS-LINUX)
export ANDROID_HOME=$HOME/Android/Sdk
export PATH+=:$HOME/.local/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools

function studio {
	local directory="${1:-android}"
	nohup android-studio "$directory" >/tmp/studio.out &
}

function webstorm {
	local directory="${1:-.}"
	nohup webstorm "$directory" >/tmp/webstorm.out &
}

function clion {
	local directory="${1:-.}"
	nohup clion "$directory" >/tmp/clion.out &
}
#+END_SRC
* X11
** xrandr.sh
#+BEGIN_SRC sh :shebang #!/bin/sh :mkdirp yes :tangle (to ".local/bin/xrandr.sh" IS-LINUX)
xrandr --output DisplayPort-1 --primary
xrandr --output DisplayPort-2 --right-of DisplayPort-1 --rotate left
#+END_SRC
* Git
** .gitconfig
#+BEGIN_SRC conf :tangle (to ".gitconfig")
[pull]
    rebase = true
[user]
    name = André Krüger
    useConfigOnly = true
[commit]
    gpgsign = true
[core]
    excludesFile = "~/.gitignore"
#+END_SRC
Only for Windows.
#+BEGIN_SRC conf :tangle (to ".gitconfig" IS-WINDOWS)
    sshCommand = C:/Windows/System32/OpenSSH/ssh.exe
[gpg]
    program = C:/Program Files (x86)/gnupg/bin/gpg.exe
#+END_SRC
** .gitignore
#+BEGIN_SRC conf :tangle (to ".gitignore")
.envrc
.idea
.direnv
generated
#+END_SRC
* Local Variables :noexport:
Local Variables:
eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
End:
