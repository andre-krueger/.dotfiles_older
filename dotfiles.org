#+PROPERTY: header-args :padline no
#+OPTIONS: toc:2
#+TITLE: Dotfiles
* Table of Contents :TOC:
- [[#emacs][Emacs]]
- [[#git][Git]]
  - [[#gitconfig][.gitconfig]]
  - [[#gitignore][.gitignore]]
- [[#bash][Bash]]
  - [[#bashrc][.bashrc]]
  - [[#bash_profile][.bash_profile]]
- [[#npm][NPM]]
  - [[#npmrc][.npmrc]]
- [[#jetbrains][Jetbrains]]
  - [[#ideavimrc][.ideavimrc]]
- [[#sound][Sound]]
  - [[#toggle][toggle]]
- [[#direnv][Direnv]]
  - [[#direnvrc][.direnvrc]]
- [[#nix][Nix]]
  - [[#nixconf][nix.conf]]

* Emacs
[[file:.doom.d/config.org][Emacs config]]
* Git
** .gitconfig
#+BEGIN_SRC conf :tangle (to ".gitconfig")
[pull]
    rebase = true
[user]
    name = André Krüger
    useConfigOnly = true
[commit]
    gpgsign = true
[core]
    excludesFile = "~/.gitignore"
#+END_SRC
Only for Windows.
#+BEGIN_SRC conf :tangle (to ".gitconfig" IS-WINDOWS)
    sshCommand = C:/Windows/System32/OpenSSH/ssh.exe
[gpg]
    program = C:/Program Files (x86)/gnupg/bin/gpg.exe
#+END_SRC
** .gitignore
#+BEGIN_SRC conf :tangle (to ".gitignore")
.envrc
.idea
.direnv
#+END_SRC
* Bash
** .bashrc
#+BEGIN_SRC conf :tangle (to ".bashrc" IS-LINUX)
# Source global definitions
if [ -f /etc/bashrc ]; then
   . /etc/bashrc
fi

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]
then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

export ANDROID_HOME=$HOME/Android/Sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
function studio {
  local directory="${1:-android}"
  nohup ~/.local/bin/studio "$directory" > /tmp/studio.out &
}

function webstorm {
  local directory="${1:-.}"
  nohup ~/.local/bin/webstorm "$directory" > /tmp/webstorm.out &
}

function clion {
  local directory="${1:-.}"
  nohup ~/.local/bin/clion "$directory" > /tmp/clion.out &
}

eval "$(direnv hook bash)"
#+END_SRC
** .bash_profile
#+BEGIN_SRC conf :tangle (to ".bash_profile" IS-LINUX)
if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi

if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi
#+END_SRC
* NPM
** .npmrc
#+BEGIN_SRC conf :tangle (to ".npmrc")
save-exact=true
#+END_SRC
* Jetbrains
** .ideavimrc
#+BEGIN_SRC conf :tangle (to ".ideavimrc" IS-LINUX)
set commentary
set relativenumber
let mapleader="\<Space>"
nmap <leader>. :action GotoDeclaration<cr>
nmap <leader>, :action Back<cr>
set clipboard+=unnamed
set ignorecase
set smartcase
#+END_SRC
* Sound
** toggle
#+BEGIN_SRC sh :shebang #!/bin/sh :tangle (to "toggle.sh" IS-LINUX)
HEADPHONE="active profile: <output:analog-stereo+input:analog-stereo>"
SPEAKER="active profile: <output:iec958-stereo>"
OUTPUT=$(pacmd list-cards | grep "active profile" | tail -n1 | xargs)

if [ "$OUTPUT" = "$HEADPHONE" ]
then
  pacmd set-card-profile 1 output:iec958-stereo
elif [ "$OUTPUT" = "$SPEAKER" ]
then
  pacmd set-card-profile 1 output:analog-stereo+input:analog-stereo
fi

#+END_SRC
* Direnv
** .direnvrc
#+BEGIN_SRC conf :tangle (to ".direnvrc" IS-LINUX)
source $HOME/.nix-profile/share/nix-direnv/direnvrc
#+END_SRC
Fix to make GTK programs outside from nix work in a nix-shell.
#+BEGIN_SRC conf :tangle (to ".direnvrc" IS-LINUX)
use_nix_custom() {
  use_nix --keep XDG_DATA_DIRS
}
#+END_SRC
* Nix
** nix.conf
#+BEGIN_SRC conf :mkdirp yes :tangle (to ".config/nix/nix.conf" IS-LINUX)
keep-derivations = true
keep-outputs = true
#+END_SRC
* Local Variables :noexport:
Local Variables:
eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
End:
