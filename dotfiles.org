#+PROPERTY: header-args :padline no :mkdirp yes
#+OPTIONS: toc:2
#+TITLE: Dotfiles
* Table of Contents :TOC:
- [[#emacs][Emacs]]
- [[#npm][NPM]]
  - [[#npmrc][.npmrc]]
- [[#jetbrains][Jetbrains]]
  - [[#ideavimrc][.ideavimrc]]
- [[#test][test]]
- [[#autostart][autostart]]
- [[#bash][Bash]]
  - [[#bashrc][bashrc]]
- [[#git][Git]]
  - [[#gitconfig][.gitconfig]]
  - [[#gitignore][.gitignore]]
  - [[#avd][AVD]]

* Emacs
[[file:.doom.d/config.org][Emacs config]]
* NPM
** .npmrc
#+BEGIN_SRC conf :tangle (to ".npmrc")
save-exact=true
#+END_SRC
#+BEGIN_SRC conf :tangle (to ".yarnrc.yml")
defaultSemverRangePrefix: ""
# Needed until this is resolved: https://github.com/react-native-community/cli/issues/27
nodeLinker: node-modules
#+END_SRC
* Jetbrains
** .ideavimrc
#+BEGIN_SRC conf :tangle (to ".ideavimrc" IS-LINUX)
set commentary
set relativenumber
let mapleader="\<Space>"
nmap <leader>. :action GotoDeclaration<cr>
nmap <leader>, :action Back<cr>
nmap <leader>fs :action SaveAll<cr>
set clipboard+=unnamed
set ignorecase
set smartcase
#+END_SRC
* test
#+END_SRC
Disabled for now
#+BEGIN_SRC sh :shebang #!/bin/sh :tangle (to ".local/bin/kill-gnome-keyring-daemon.sh" nil)
#!/usr/bin/env bash

#killAndWait() {
#  kill $1 2> /dev/null && wait $1 2> /dev/null
#}

#killAndWait $(pgrep gnome-keyring)
pkill gnome-keyring
#+END_SRC
* autostart
Disabled for now
#+BEGIN_SRC conf :tangle (to ".config/autostart/kill-gnome-keyring-daemon.desktop" nil)
[Desktop Entry]
Name=Kill gnome-keyring-daemon
Type=Application
Exec=/home/andre/.local/bin/kill-gnome-keyring-daemon.sh
Terminal=false  
#+END_SRC
Disabled for now
#+BEGIN_SRC conf :tangle (to ".config/autostart/gnome-keyring-ssh.desktop" nil)
[Desktop Entry]
Type=Application
Hidden=true
#+END_SRC

Disabled for now
#+BEGIN_SRC conf :tangle (to ".local/share/dbus-1/services/org.freedesktop.secrets.service" nil)
[D-BUS Service]
Name=org.freedesktop.secrets
Exec=/usr/bin/keepassxc 
#+END_SRC


Disabled for now
#+BEGIN_SRC conf :tangle (to ".gnupg/gpg-agent.conf" nil)
default-cache-ttl 0
max-cache-ttl 0
#+END_SRC



#+BEGIN_SRC conf :tangle (to ".bash_profile" IS-LINUX)
# .bash_profile

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
	. ~/.bashrc
fi

# User specific environment and startup programs

eval `ssh-agent`
source "$HOME/.cargo/env"
#+END_SRC
#+BEGIN_SRC conf :tangle (to ".profile" IS-LINUX)
source "$HOME/.cargo/env"
#+END_SRC
* Bash
** bashrc
#+BEGIN_SRC sh :tangle (to ".bashrc" IS-LINUX)
# export QEMU_AUDIO_DRV=none
# export PATH+=:$HOME/.local/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools

# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi


export ANDROID_HOME=$HOME/Android/Sdk

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]
then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

PATH="$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools"

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
if [ -d ~/.bashrc.d ]; then
	for rc in ~/.bashrc.d/*; do
		if [ -f "$rc" ]; then
			. "$rc"
		fi
	done
fi

function studio {
	local directory="${1:-android}"
	nohup studio "$directory" >/tmp/studio.out &
}

function webstorm {
	local directory="${1:-.}"
	nohup webstorm "$directory" >/tmp/webstorm.out &
}

function clion {
	local directory="${1:-.}"
	nohup clion "$directory" >/tmp/clion.out &
}

function goland {
	local directory="${1:-.}"
	nohup goland "$directory" >/tmp/goland.out &
}



unset rc
source "$HOME/.cargo/env"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
        
#+END_SRC
* Git
** .gitconfig
#+BEGIN_SRC conf :tangle (to ".gitconfig")
[pull]
    rebase = true
[user]
    name = André Krüger
    useConfigOnly = true
[commit]
    gpgsign = true
[core]
    excludesFile = "~/.gitignore"
#+END_SRC
Only for Windows.
#+BEGIN_SRC conf :tangle (to ".gitconfig" IS-WINDOWS)
    sshCommand = C:/Windows/System32/OpenSSH/ssh.exe
[gpg]
    program = C:/Program Files (x86)/gnupg/bin/gpg.exe
#+END_SRC
** .gitignore
#+BEGIN_SRC conf :tangle (to ".gitignore")
.envrc
.idea
.direnv
#+END_SRC
** AVD
Maybe fixes the avd freeze after some time
#+BEGIN_SRC conf :tangle (to ".android/advancedFeatures.ini" IS-LINUX)
QuickbootFileBacked = off
#+END_SRC
* Local Variables :noexport:
Local Variables:
eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
End:
